# 3 "lexer.mll"
 
 open Parser        (* The type token is defined in parser.mli *)
 exception Eof

# 7 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\230\255\231\255\232\255\233\255\234\255\235\255\236\255\
    \237\255\238\255\239\255\241\255\242\255\001\000\000\000\002\000\
    \246\255\247\255\248\255\046\000\056\000\251\255\252\255\253\255\
    \254\255\001\000\002\000\068\000\078\000\245\255\244\255\001\000\
    \003\000\243\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\015\000\255\255\255\255\
    \255\255\255\255\255\255\006\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\005\000\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\025\000\025\000\255\255\255\255\000\000\000\000\255\255\
    \255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\023\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\000\000\000\000\002\000\000\000\022\000\000\000\000\000\
    \025\000\000\000\026\000\026\000\000\000\020\000\000\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\021\000\000\000\018\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\000\000\014\000\007\000\013\000\
    \029\000\015\000\000\000\000\000\000\000\006\000\011\000\012\000\
    \031\000\030\000\033\000\005\000\004\000\032\000\000\000\000\000\
    \010\000\009\000\008\000\017\000\028\000\016\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\028\000\000\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \000\000\255\255\025\000\026\000\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\000\000\000\000\
    \015\000\000\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \013\000\014\000\032\000\000\000\000\000\031\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\019\000\000\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\027\000\255\255\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\025\000\026\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 10 "lexer.mll"
                 ( COMMENT )
# 134 "lexer.ml"

  | 1 ->
# 11 "lexer.mll"
                 ( token lexbuf )
# 139 "lexer.ml"

  | 2 ->
# 12 "lexer.mll"
                 ( EOL )
# 144 "lexer.ml"

  | 3 ->
# 13 "lexer.mll"
                 ( BEGINEND )
# 149 "lexer.ml"

  | 4 ->
# 14 "lexer.mll"
                 ( SEP )
# 154 "lexer.ml"

  | 5 ->
# 15 "lexer.mll"
                              ( FLOAT(float_of_string(Lexing.lexeme lexbuf)) )
# 159 "lexer.ml"

  | 6 ->
# 16 "lexer.mll"
                 ( INT(int_of_string(Lexing.lexeme lexbuf)) )
# 164 "lexer.ml"

  | 7 ->
# 17 "lexer.mll"
                 ( ST )
# 169 "lexer.ml"

  | 8 ->
# 18 "lexer.mll"
                 ( LB )
# 174 "lexer.ml"

  | 9 ->
# 19 "lexer.mll"
                 ( RB )
# 179 "lexer.ml"

  | 10 ->
# 20 "lexer.mll"
                 ( IF )
# 184 "lexer.ml"

  | 11 ->
# 21 "lexer.mll"
                 ( EQ )
# 189 "lexer.ml"

  | 12 ->
# 22 "lexer.mll"
                 ( GOTO )
# 194 "lexer.ml"

  | 13 ->
# 23 "lexer.mll"
                 ( O )
# 199 "lexer.ml"

  | 14 ->
# 24 "lexer.mll"
                 ( N )
# 204 "lexer.ml"

  | 15 ->
# 25 "lexer.mll"
                 ( G )
# 209 "lexer.ml"

  | 16 ->
# 26 "lexer.mll"
                 ( X )
# 214 "lexer.ml"

  | 17 ->
# 27 "lexer.mll"
                 ( Y )
# 219 "lexer.ml"

  | 18 ->
# 28 "lexer.mll"
                 ( Z )
# 224 "lexer.ml"

  | 19 ->
# 29 "lexer.mll"
                 ( F )
# 229 "lexer.ml"

  | 20 ->
# 30 "lexer.mll"
                 ( M )
# 234 "lexer.ml"

  | 21 ->
# 31 "lexer.mll"
                 ( S )
# 239 "lexer.ml"

  | 22 ->
# 32 "lexer.mll"
                 ( T )
# 244 "lexer.ml"

  | 23 ->
# 33 "lexer.mll"
                 ( B )
# 249 "lexer.ml"

  | 24 ->
# 34 "lexer.mll"
                 ( SHARP )
# 254 "lexer.ml"

  | 25 ->
# 35 "lexer.mll"
                 ( raise Eof )
# 259 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

